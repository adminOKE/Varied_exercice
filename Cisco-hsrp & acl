petite infrastructure r√©seau avec Cisco Packet Tracer en utilisant deux routeurs en configuration master/slave (HSRP), des ACL (Listes de Contr√¥le d'Acc√®s) et une IP virtuelle de passerelle.
Objectifs du Lab :
	1. Configurer deux routeurs en HSRP (Hot Standby Router Protocol) pour la redondance de passerelle.
	2. Mettre en place des ACL pour filtrer le trafic.
	3. Utiliser une IP virtuelle comme passerelle par d√©faut pour les h√¥tes du r√©seau.
Mat√©riel n√©cessaire :
	‚Ä¢ 2 routeurs (par exemple, Cisco 1941)
	‚Ä¢ 2 commutateurs (par exemple, Cisco 2960)
	‚Ä¢ 2 PC
	‚Ä¢ C√¢bles appropri√©s (console, Ethernet, etc.)

√âtape 1 : Connexion des appareils
	1. Routeurs :
		‚óã Connecte les deux routeurs ensemble via leurs interfaces GigabitEthernet0/0 (par exemple, R1-G0/0 √† R2-G0/0).
		‚óã Connecte chaque routeur √† un commutateur via leurs interfaces GigabitEthernet0/1 (R1-G0/1 √† SW1 et R2-G0/1 √† SW2).
	2. Commutateurs :
		‚óã Connecte chaque commutateur √† un PC (SW1 √† PC1 et SW2 √† PC2).
	3. PC :
		‚óã Configure les PC avec des adresses IP statiques dans le m√™me sous-r√©seau que l'IP virtuelle de la passerelle.

√âtape 2 : Configuration des interfaces sur les routeurs
Routeur 1 (R1) :
bash
Copy
Router>enableRouter# configure terminal!Configuration de l'interface G0/0 (lien entre R1 et R2)
Router(config)# interface GigabitEthernet0/0
Router(config-if)# ip address 192.168.1.1 255.255.255.252
Router(config-if)# no shutdown
Router(config-if)# exit
! Configuration de l'interface G0/1 (lien vers SW1)Router(config)# interface GigabitEthernet0/1Router(config-if)# ip address 192.168.10.1 255.255.255.0Router(config-if)# no shutdownRouter(config-if)# exit
Routeur 2 (R2) :
bash
Copy
Router>enableRouter# configure terminal!Configuration de l'interface G0/0 (lien entre R2 et R1)
Router(config)# interface GigabitEthernet0/0
Router(config-if)# ip address 192.168.1.2 255.255.255.252
Router(config-if)# no shutdown
Router(config-if)# exit
! Configuration de l'interface G0/1 (lien vers SW2)Router(config)# interface GigabitEthernet0/1Router(config-if)# ip address 192.168.10.2 255.255.255.0Router(config-if)# no shutdownRouter(config-if)# exit

√âtape 3 : Configuration de HSRP (IP virtuelle)
Routeur 1 (R1) :
bash
Copy
Router(config)# interface GigabitEthernet0/1Router(config-if)# standby 1 ip 192.168.10.254  ! IP virtuelle de la passerelleRouter(config-if)# standby 1 priority 110     ! R1 est le routeur masterRouter(config-if)# standby 1 preempt          ! Preempt permet de reprendre le r√¥le de master si R1 revient en ligneRouter(config-if)# exit
Routeur 2 (R2) :
bash
Copy
Router(config)# interface GigabitEthernet0/1Router(config-if)# standby 1 ip 192.168.10.254  ! IP virtuelle de la passerelleRouter(config-if)# standby 1 priority 100        ! R2 est le routeur slaveRouter(config-if)# standby 1 preempt             ! Preempt permet de reprendre le r√¥le de master si R2 revient en ligneRouter(config-if)# exit

√âtape 4 : Configuration des ACL
Exemple d'ACL pour bloquer le trafic ICMP (ping) entre les PC et les routeurs :
Routeur 1 (R1) :
bash
Copy
Router(config)# access-list 100 deny icmp any anyRouter(config)# access-list 100 permit ip any anyRouter(config)# interface GigabitEthernet0/1Router(config-if)# ip access-group 100 inRouter(config-if)# exit
Routeur 2 (R2) :
bash
Copy
Router(config)# access-list 100 deny icmp any anyRouter(config)# access-list 100 permit ip any anyRouter(config)# interface GigabitEthernet0/1Router(config-if)# ip access-group 100 inRouter(config-if)# exit

√âtape 5 : Configuration des PC
	‚Ä¢ PC1 :
		‚óã IP : 192.168.10.10
		‚óã Masque : 255.255.255.0
		‚óã Passerelle : 192.168.10.254 (IP virtuelle HSRP)
	‚Ä¢ PC2 :
		‚óã IP : 192.168.10.20
		‚óã Masque : 255.255.255.0
		‚óã Passerelle : 192.168.10.254 (IP virtuelle HSRP)

√âtape 6 : Test de la configuration
	1. V√©rification HSRP :
		‚óã Sur R1 et R2, utilise la commande show standby pour v√©rifier l'√©tat de HSRP.
		‚óã R1 devrait √™tre le routeur actif (master) et R2 le routeur de secours (slave).
	2. Test de connectivit√© :
		‚óã Depuis PC1, essaie de pinguer PC2 (ping 192.168.10.20).
		‚óã Si l'ACL est correctement configur√©e, le ping devrait √©chouer.
	3. Test de redondance :
		‚óã √âteins l'interface G0/1 de R1 (shutdown).
		‚óã V√©rifie que R2 prend le relais en tant que routeur actif.

Conclusion
Tu as maintenant une petite infrastructure avec deux routeurs en HSRP pour la redondance, des ACL pour filtrer le trafic, et une IP virtuelle de passerelle. N'h√©site pas √† ajuster les configurations selon tes besoins sp√©cifiques. Si tu as des questions ou besoin d'aide suppl√©mentaire, je suis l√† ! üòä

Pour √©viter de configurer manuellement chaque nouvel √©quipement dans un r√©seau, tu peux utiliser des protocoles et des outils qui automatisent la propagation des routes, des ACL (Listes de Contr√¥le d'Acc√®s), et d'autres configurations. Voici quelques m√©thodes pour y parvenir :

1. Utiliser un protocole de routage dynamique
Les protocoles de routage dynamique permettent aux routeurs de partager automatiquement des informations sur les r√©seaux disponibles. Cela √©vite de configurer manuellement des routes statiques sur chaque routeur.
Protocoles courants :
	‚Ä¢ OSPF (Open Shortest Path First) : Id√©al pour les grands r√©seaux.
	‚Ä¢ EIGRP (Enhanced Interior Gateway Routing Protocol) : Propri√©taire Cisco, efficace pour les r√©seaux de taille moyenne √† grande.
	‚Ä¢ RIP (Routing Information Protocol) : Simple, mais moins adapt√© aux grands r√©seaux.
Exemple de configuration OSPF :
Sur R1 :
bash
Copy
R1(config)# router ospf 1R1(config-router)# network 192.168.1.0 0.0.0.3 area 0R1(config-router)# network 192.168.10.0 0.0.0.255 area 0
Sur R2 :
bash
Copy
R2(config)# router ospf 1R2(config-router)# network 192.168.1.0 0.0.0.3 area 0R2(config-router)# network 192.168.20.0 0.0.0.255 area 0
R√©sultat :
	‚Ä¢ Les routeurs partagent automatiquement les informations sur les r√©seaux connect√©s.
	‚Ä¢ Les routes sont mises √† jour dynamiquement.

2. Utiliser des mod√®les de configuration (Templates)
Tu peux cr√©er des mod√®les de configuration pour les routeurs et les commutateurs. Ces mod√®les peuvent √™tre appliqu√©s √† chaque nouvel √©quipement pour gagner du temps.
Exemple de mod√®le pour un routeur :
bash
Copy
hostnameROUTER-TEMPLATE
!interface GigabitEthernet0/0
 ipaddress 192.168.1.1 255.255.255.252
 no shutdown!interface GigabitEthernet0/1
 ipaddress 192.168.10.1 255.255.255.0
 no shutdown!router ospf 1network 192.168.1.0 0.0.0.3 area 0network 192.168.10.0 0.0.0.255 area 0!ipaccess-list extended ACL-TEMPLATE
 permit ipany any
!line vty 04login localtransport input ssh!end
Avantages :
	‚Ä¢ Tu peux copier-coller ce mod√®le sur chaque nouvel √©quipement.
	‚Ä¢ Tu peux personnaliser rapidement les adresses IP et autres param√®tres sp√©cifiques.

3. Utiliser un serveur DHCP pour les routeurs
Tu peux configurer un serveur DHCP pour attribuer automatiquement des adresses IP aux interfaces des routeurs. Cela √©vite de configurer manuellement les adresses IP.
Exemple de configuration DHCP sur un routeur :
bash
Copy
R1(config)# ip dhcp pool ROUTER-POOLR1(dhcp-config)# network 192.168.1.0 255.255.255.252R1(dhcp-config)# default-router 192.168.1.1R1(dhcp-config)# exit
Sur les autres routeurs :
	‚Ä¢ Configure les interfaces pour obtenir une adresse IP via DHCP :
bash
Copy
R2(config)# interface GigabitEthernet0/0R2(config-if)# ip address dhcpR2(config-if)# no shutdown

4. Utiliser un outil de gestion centralis√©e
Des outils comme Cisco DNA Center, Ansible, ou Puppet permettent de d√©ployer et g√©rer des configurations sur plusieurs √©quipements de mani√®re centralis√©e.
Exemple avec Ansible :
	‚Ä¢ Cr√©e un playbook Ansible pour d√©ployer des configurations sur plusieurs routeurs.
	‚Ä¢ Exemple de playbook :
yaml
Copy
-hosts:routers
  tasks:-name:Configure OSPF
      ios_config:lines:-"router ospf 1"-"network 192.168.1.0 0.0.0.3 area 0"-"network 192.168.10.0 0.0.0.255 area 0"-name:Apply ACL
      ios_config:lines:-"ip access-list extended ACL-TEMPLATE"-"permit ip any any"
Avantages :
	‚Ä¢ D√©ploiement automatis√© des configurations.
	‚Ä¢ Gestion centralis√©e des √©quipements.

5. Utiliser des ACL centralis√©es
Au lieu de configurer des ACL sur chaque routeur, tu peux utiliser une ACL centralis√©e sur un routeur ou un pare-feu, puis rediriger le trafic vers cet √©quipement.
Exemple :
	‚Ä¢ Configure une ACL sur un routeur central (par exemple, R1).
	‚Ä¢ Redirige le trafic des autres routeurs vers R1 pour l'inspection.
Sur R1 :
bash
Copy
R1(config)# ip access-list extended CENTRAL-ACLR1(config-ext-nacl)# permit ip any any
Sur R2 :
bash
Copy
R2(config)# ip route 0.0.0.0 0.0.0.0 192.168.1.1

6. Utiliser des scripts pour automatiser les configurations
Tu peux √©crire des scripts (en Python, Bash, etc.) pour configurer automatiquement les √©quipements via SSH ou Telnet.
Exemple de script Python pour configurer un routeur :
python
Copy
importparamiko
defconfigure_router(ip,username,password):ssh =paramiko.SSHClient()ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())ssh.connect(ip,username=username,password=password)commands =["configure terminal","interface GigabitEthernet0/0","ip address 192.168.1.1 255.255.255.252","no shutdown","exit","router ospf 1","network 192.168.1.0 0.0.0.3 area 0","end"]forcmd incommands:stdin,stdout,stderr =ssh.exec_command(cmd)print(stdout.read().decode())ssh.close()configure_router("192.168.1.1","admin","cisco")
Avantages :
	‚Ä¢ Automatisation des configurations.
	‚Ä¢ R√©utilisable pour plusieurs √©quipements.

7. Utiliser ZTP (Zero Touch Provisioning)
ZTP permet √† un nouvel √©quipement de se configurer automatiquement au d√©marrage en t√©l√©chargeant sa configuration depuis un serveur.
√âtapes :
	1. Configure un serveur TFTP ou HTTP avec les fichiers de configuration.
	2. Configure DHCP pour fournir l'adresse du serveur et le fichier de configuration.
	3. Branche le nouvel √©quipement : il t√©l√©charge et applique automatiquement la configuration.

R√©sum√©
Pour √©viter de configurer manuellement chaque √©quipement :
	1. Utilise un protocole de routage dynamique (OSPF, EIGRP, etc.).
	2. Cr√©e des mod√®les de configuration.
	3. Utilise un serveur DHCP pour les adresses IP.
	4. Adopte un outil de gestion centralis√©e (Cisco DNA Center, Ansible, etc.).
	5. Centralise les ACL sur un √©quipement.
	6. Automatise les configurations avec des scripts.
	7. Utilise ZTP pour les nouveaux √©quipements.
